{"version":3,"sources":["components/InputField.js","components/Message.js","containers/Form.js","App.js","reportWebVitals.js","index.js"],"names":["InputGroup","styled","div","Label","label","Input","input","Textarea","textarea","Error","InputField","id","as","props","useField","field","meta","htmlFor","touched","error","className","Wrapper","success","type","Title","h4","MessageText","p","Message","message","messageType","title","text","h1","Button","button","initialFormValues","name","email","phone","formValidation","Yup","shape","when","is","length","then","required","otherwise","matches","FormContainer","useState","showForm","setShowForm","setMessage","isSubmitting","setIsSubmitting","initialValues","validationSchema","onSubmit","values","setTimeout","handleFormSubmit","placeholder","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cad6d88.chunk.js","sourcesContent":["import React from \"react\";\nimport { useField } from \"formik\";\nimport styled from \"styled-components/macro\";\n\nconst InputGroup = styled.div`\n  margin-bottom: 20px;\n  max-width: 325px;\n`;\n\nconst Label = styled.label`\n  font-size: 14px;\n  font-weight: 500;\n  display: block;\n`;\n\nconst Input = styled.input`\n  width: 325px;\n  height: 40px;\n  border: 1px solid #e2e6ea;\n  border-radius: 5px;\n  padding: 5px 15px;\n  margin-top: 3px;\n  font-size: 14px;\n  background-color: transparent;\n  transition: all 0.25s ease-in-out;\n\n  &:focus,\n  &:hover,\n  &:not(:placeholder-shown) {\n    outline: none;\n    border: 1px solid #3961aa;\n  }\n\n  &::placeholder {\n    color: #e2e6ea;\n    opacity: 1;\n  }\n\n  &::-webkit-inner-spin-button,\n  &::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n\nconst Textarea = styled.textarea`\n  width: 325px;\n  height: 75px;\n  padding: 10px 15px;\n  margin-top: 3px;\n  border: 1px solid #e2e6ea;\n  border-radius: 5px;\n  font-size: 14px;\n  background-color: transparent;\n  transition: all 0.25s ease-in-out;\n  resize: vertical;\n\n  &:focus,\n  &:hover,\n  &:not(:placeholder-shown) {\n    outline: none;\n    border: 1px solid #3961aa;\n  }\n\n  &::placeholder {\n    color: #e2e6ea;\n    opacity: 1;\n  }\n\n  &::-webkit-inner-spin-button,\n  &::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n\nconst Error = styled.div`\n  color: #cf3e35;\n  font-size: 12px;\n  font-weight: 500;\n  margin-top: 2px;\n`;\n\nconst InputField = ({ label, id, as, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <InputGroup>\n      <Label htmlFor={id}>{label}</Label>\n      {as === \"input\" && <Input id={id} {...field} {...props} />}\n      {as === \"textarea\" && <Textarea id={id} {...field} {...props} />}\n      {meta.touched && meta.error ? (\n        <Error className=\"error\">{meta.error}</Error>\n      ) : null}\n    </InputGroup>\n  );\n};\n\nexport default InputField;\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\n\nconst getMessageBackground = (messageType) => {\n  const background = {\n    error: \"#cf3e35\",\n    success: \"#72be6c\",\n  };\n  return background[messageType];\n};\n\nexport const Wrapper = styled.div`\n  width: 325px;\n  padding: 15px 20px;\n  margin-bottom: 16px;\n  border-radius: 5px;\n  color: white;\n  background: ${(props) => getMessageBackground(props.type)};\n`;\n\nexport const Title = styled.h4`\n  font-size: 15px;\n  margin-bottom: 3px;\n`;\n\nexport const MessageText = styled.p`\n  font-size: 14px;\n`;\n\nconst Message = ({ message }) => {\n  const { messageType, title, text } = message;\n  return (\n    <Wrapper type={messageType}>\n      <Title>{title}</Title>\n      <MessageText>{text}</MessageText>\n    </Wrapper>\n  );\n};\n\nexport default Message;\n","import React, { useState } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport styled from \"styled-components/macro\";\n\nimport InputField from \"../components/InputField\";\nimport Message from \"../components/Message\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  max-width: 375px;\n  padding: 25px;\n  margin: auto;\n  border: 1px solid #e2e6ea;\n`;\n\nconst Title = styled.h1`\n  color: #000;\n  font-size: 32px;\n  margin-bottom: 1rem;\n`;\n\nconst Button = styled.button`\n  height: 40px;\n  width: 100%;\n  max-width: 325px;\n  border: none;\n  border-radius: 5px;\n  color: white;\n  background-color: #3961aa;\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    background-color: #4d6db1;\n  }\n`;\n\nconst phoneRegExp = /^[+]?[()/0-9. -]{9,}$/;\n\nconst initialFormValues = { name: \"\", email: \"\", phone: \"\", message: \"\" };\n\nconst formValidation = Yup.object().shape(\n  {\n    email: Yup.string()\n      .email(\"Invalid email address\")\n      .when(\"phone\", {\n        is: (phone) => !phone || phone.length === 0,\n        then: Yup.string()\n          .email()\n          .required(\"Please enter your e-mail or phone\"),\n        otherwise: Yup.string(),\n      }),\n    phone: Yup.string()\n      .matches(phoneRegExp, \"Invalid phone number\")\n      .when(\"email\", {\n        is: (email) => !email || email.length === 0,\n        then: Yup.string().required(\"Please enter your e-mail or phone\"),\n        otherwise: Yup.string(),\n      }),\n    message: Yup.string().required(\"Please enter your message\"),\n  },\n  [[\"email\", \"phone\"]]\n);\n\nexport function FormContainer() {\n  const [showForm, setShowForm] = useState(true);\n  const [message, setMessage] = useState(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleFormSubmit = (values) => {\n    setIsSubmitting(true);\n    setTimeout(() => {\n      setIsSubmitting(false);\n      setShowForm(false);\n\n      if (values.email === \"neexistujici@email.cz\") {\n        setMessage({\n          messageType: \"error\",\n          title: \"Error!\",\n          text: \"E-mail doesn't exist.\",\n        });\n      } else {\n        setMessage({\n          messageType: \"success\",\n          title: \"Thank you!\",\n          text: \"Your message was sent successfully.\",\n        });\n      }\n    }, 3000);\n  };\n\n  const handleResetButton = () => {\n    setMessage(null);\n    setShowForm(true);\n  };\n\n  return (\n    <Wrapper>\n      <Title>Contact Us</Title>\n      {message && <Message message={message} />}\n      {showForm ? (\n        <Formik\n          initialValues={initialFormValues}\n          validationSchema={formValidation}\n          onSubmit={(values) => {\n            handleFormSubmit(values);\n          }}\n        >\n          <Form>\n            <InputField\n              label=\"Name\"\n              id=\"name\"\n              name=\"name\"\n              type=\"text\"\n              placeholder=\"Name\"\n              as=\"input\"\n            />\n\n            <InputField\n              label=\"E-mail\"\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"E-mail\"\n              as=\"input\"\n            />\n\n            <InputField\n              label=\"Phone\"\n              id=\"phone\"\n              name=\"phone\"\n              type=\"text\"\n              placeholder=\"Phone\"\n              as=\"input\"\n            />\n\n            <InputField\n              label=\"Message\"\n              id=\"message\"\n              name=\"message\"\n              placeholder=\"Type your message here\"\n              as=\"textarea\"\n            />\n\n            <Button type=\"submit\">\n              {isSubmitting ? \"Submitting...\" : \"Submit\"}\n            </Button>\n          </Form>\n        </Formik>\n      ) : (\n        <Button type=\"button\" onClick={handleResetButton}>\n          Send new message\n        </Button>\n      )}\n    </Wrapper>\n  );\n}\n","import \"./App.css\";\nimport { FormContainer } from \"./containers/Form\";\n\nfunction App() {\n  return <FormContainer />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}